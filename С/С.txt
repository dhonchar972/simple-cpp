gcc -Wall -g main.c -lm -o main
	"Wall" - warnings
	"g" - generate debug info
	"lm" - add library m(math) to build

man 1 malloc
	"1" - insatlled in systeme
	"2" - systeme calls
	"3" - std
	...

printf("%.5f %.5\n", (-q - d) / (2 * p), (-q + d) / (2 * p));
	"d", "i" - signed decimal
	"o" - unsigned octal
	"u" - unsigned decimal
	"x", "X" - unsigned hexadecimal
	"f", "F" - float decimal
	"e", "E" - exponential form(scientific notation)
	"g", "G" - exponential form
	"lf" - long float(double)
	"c" - parameter, decimal, simbol
	"s" - parameter, string address
	"p" - parameter, void* address, hexadecimal
	modifiers:
		"L" - long double
		"h" - short
		"l" - unsigned long
		"ll" - long long

v = scanf("%d %f %lf", &p, &q, &r);
	"d" - signed decimal
	"i" - signed decimal, octal, hexadecimal
	"o" - unsigned octal
	"u" - unsigned decimal
	"x" - unsigned hexadecimal
	"f", "e", "g" - float decimal
	"lf" - long float(double)
	"c" - symbol
	"s" - string
	"p" - address expression
	"[...]" - string
	"[^...]" - string

#include <stdio.h>
int main(int argc, char **argv)
{
	printf("Hello!!!\n");
	return 0;
}

int:
	char - int8(8bit - 1byte), //signed, unsigned
	short - int16(16bit - 2byte), 
	int - int32(32bit - 3byte), 
	long - int64(64bit - 4byte), 
	long long - int64(64bit - 4byte)
float:
	float
	double
	long double

sizeof(char) == sizeof 1

Memory:
	dec:
		.text(code)
		.data(gvar - initialized data)
		.bss(uninitalized data)
	HEAP(UP)
	STACK(DOWN)

void *malloc(int size); // malloc, calloc, realloc
void free(void *p);

double *k = malloc(360 * sizeof(double));
for (i = 0; i < 360; i++)
	k[i] = sin((2 * M_PI / 360.0) * (double)i);
free(k);

const int i_count = 78; // is not compiletime constant, not suitable for use in switch, use enum or macros(before C99)

enum suit {
    Club = 0,
    Ciamonds = 10,
    Cearts = 20,
    Cpades = 3,
};
enum suit some_name = club;
enum {ITALICS = 1, BOLD = 2, UNDERLINE = 4} //normal constant(before C99)

const int *p; // pointer to constant, can't chage value
int *const p; // constant pointer, can't change pointer address
const int *const p; // both
void some_func(const int *v); //"in" parameter modifier from c#

int *ptrvec[20] == int vec[5] // 20/5=4byte(32bit)
int m[3] = {1, 2, 3};
int length = sizeof(m)/sizeof(m[0]); // or sizeof(m)/sizeof(*m);

strlen(); // from string.h
int string_length1(const char *str)
{
	int i;
	for(i = 0; str[i]; i++) {}
	return i;
}
int string_length2(const char *str)
{
	const char *p;
	for(p = str; *p; p++) {}
	return p - str;
}
int string_length3(const char *str)
{
	const char *p = str;
	while(*p++);
	return p - str;
}

void string_copy1(char *dest, const char *src)
{
	int i;
	for(i = 0; src[i]; i++)
		dest[i] = src[i];
	dest[i] = 0; // end of string("\0")
}
void string_copy2(char *dest, const char *src)
{
	while(*src) {
		*dest = *src;
		dest++;
		src++;
	}
	*dest = 0;
}
void string_copy3(char *dest, const char *src)
{
	for(; *src; dest++, src++)
		*dest = *src;
	*dest = 0;
}
void string_copy4(char *dest, const char *src)
{
	while((*dest++ = *src++));
}

char str[6] = {'H', 'e', 'l', 'l', 'o', 0}; // string array, mutable
char str[] = "Hello"; // stil mutable
char *ptr = "Hello"; // string literal(classic string), unmutable

int main(int argc, char **argv)
{
	argv++;
	while(*argv) {
		printf("[%s]\n", *argv);
		argv++;
	}
	return 0;
}
int main(int argc, char **argv)
{
	printf("My name is %s\n", argv[0]);
	return 0;
}

*(arr + 3) == arr[3]

int main()
{
	int c;
	while((c = getchar() != EOF) { // getchar() - get char from input stream
		if (c == '\n')
			printf("OK\n");
	}
	return 0;
}

FILE* fopen(const char *name, const char *mode);

FILE *f;
f = fopen("file.txt", "r");
if(!f) {
	perror("file.txt");
	exit(1);
}

fprintf(stderr, "Error!");
fscanf()

int fclose(FILE *f);

int getchar();
int putchar(int c);
int fgetc(FILE *stream);
int fputc(int c, FILE *stream);
int ungetc(int c, FILE *stream);

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Buffer Overflow Exploit!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DONT USE GETS!!!!!!!!!!!!!!!! USE FGETS!!!!!!!!!!!!!!!!!!!

int fflush(FILE *stream);
isatty

int sprintf(char *buf, const *format, ...);

struct student {
	char name[max_name_len];
	char sex;
};
struct student st1; // type - "struct student", name - "st1", same to enum - "enum struct_name name;"
sizeof(struct student);

#define IF   - if(
#define THEN - ) {
#define ELSE - } else {
#define FI   - }

#define MAX(A, B) ((A) > (B) ? (A) : (B))

#define MAKE_ARRAY_SUM_FUNCTION(TYPE) \
	TYPE TYPE ## _array_sum(const TYPE *a, int n) { \  //int_array_sum
	TYPE s = 0;

#if 1
#elif
#else
#ifdef
#ifndef
#elifdef
#elifndef
#undef
#error
#line
#endif
__LINE__
__FILE__
__DATE__
__TIME__
__STDC__
#include <stdio.h> // "mymodule.h"

gcc -Wall -g -D MYSYMBOL main.c -I ./somefolder/ -o main

gcc -Wall -g -c mod1.c
gcc -Wall -g -c mod2.c
gcc -Wall -g -c prog.c
gcc prog.o mod1.o mod2.o -o prog

int val;
static int l_val;
extern int g_val;

prefixes:
	m_ for class members(fields), like this. in other languages
	a_ for arguments
	l_ for locals
	g_ for globals
	s_ for static
	c_ for constants/readonlys
	p_ for pointer (and pp for pointer to pointer)
	r_ for references
	v_ for volatile
	i_ for indexes and iterators
	e_ for events

//header guards
#ifndef MYHEADERNAME_H
#define MYHEADERNAME_H
/*
  main code
*/
#endif

double (*fptr)(const double *, int); // function reference

strlen, strcmp, strcpy, strstr, memset, memcpy, memmove
rand, srand

gcc -Wall -g -static greet.c -o greet

errors: errno.h
	ENOENT
	EACCES
	EROFS
	strerror
	stderr
	perror